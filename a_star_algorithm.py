# -*- coding: utf-8 -*-
"""A_star_algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KspwF76JzI_RevVpcKZ5iInMz3xApznO
"""

import numpy as np
import networkx as nx
import matplotlib as plt
import sys
 
def h1(a):
    count = 0
    for i in range(len(a)):
     if a[i] != i + 1 and a[i]!=0:
         count +=1
    return count
 
def h2(a):
    counts = 0
    for i in range(len(a)):
        if a[i]!= i+1 and a[i]!= 0 :
            counts = counts+(abs((a[i] -(i+1))/2))
    return int(counts)
 
def swap_down(a,i):
    temp = a[i + 3]
    a[i + 3] = a[i]
    a[i] = temp
    return a
 
def swap_up(a,i):
    temp = a[i - 3]
    a[i - 3] = a[i]
    a[i] = temp
    return a
 
def swap_right(a,i):
    temp = a[i +1]
    a[i +1] = a[i]
    a[i] = temp
    return a
 
def swap_left(a,i):
    temp = a[i - 1]
    a[i - 1] = a[i]
    a[i] = temp
    return a
 
def find_path(elements, visited, h, depth):
  f = []
  for i in h:
    f+=[i+depth]

  ind = f.index(min(f))

  while elements[ind] in visited:
    elements.pop(ind)
    f.pop(ind)

    if not f:
      break

    else:
      ind = f.index(min(f))

  if not elements:
    a = []
  else:
    a = elements[ind]

  return a
 
def A_star(a,res, depth, h_num,memory):
    elements = []
    visited = []
    cont = "0"
    while a != res and a != []: #and cont == "0":
      visited.append(a)
      elements = create_tree(a)
      depth += 1
      memory +=sys.getsizeof(elements) 
      h = []
      for i in elements:
        if h_num == 1:
          h+=[h1(i)]
        if h_num == 2:
          h+=[h2(i)]

      a = find_path(elements, visited, h, depth)
          
      #print("A:   ", a)
      #print("depth ", depth-1)
      #print("Чтобы продолжить, введите 0   ")
      #cont = input()
 
    return a, depth,memory
 
 
def create_node(steps,index):
    steps.append(Node)
    for i in a:
        steps.append(Node(i,parent=steps[index]))
    return steps
 
def create_tree(a):
    elements = []
    for i in range(len(a)):
        if a[i] == 0:
 
            if i == 0:
                temp = list(swap_down(a, i))
                elements.append(temp)
                swap_down(a,i)
                temp = list(swap_right(a,i))
                elements.append(temp)
                swap_right(a,i)
                
            if i == 1:
                temp = list(swap_down(a, i))
                elements.append(temp)
                swap_down(a,i)
                temp = list(swap_right(a,i))
                elements.append(temp)
                swap_right(a,i)
                temp = list(swap_left(a,i))
                elements.append(temp)
                swap_left(a,i)
            if i == 2:
                
                temp = list(swap_down(a, i))
                elements.append(temp)
                swap_down(a,i)
                temp = list(swap_right(a,i))
                elements.append(temp)
                swap_right(a,i)
 
            if i == 3:
                temp = list(swap_up(a,i))
                elements.append(temp)
                swap_up(a,i)
                temp = list(swap_down(a, i))
                elements.append(temp)
                swap_down(a,i)
                temp = list(swap_right(a,i))
                elements.append(temp)
                swap_right(a,i)
                
            if i == 4:
                temp = list(swap_up(a,i))
                elements.append(temp)
                swap_up(a,i)
                temp = list(swap_down(a, i))
                elements.append(temp)
                swap_down(a,i)
                temp = list(swap_right(a,i))
                elements.append(temp)
                swap_right(a,i)
                temp = list(swap_left(a,i))
                elements.append(temp)
                swap_left(a,i)
            if i == 5:
                temp = list(swap_up(a,i))
                elements.append(temp)
                swap_up(a,i)
                temp = list(swap_down(a, i))
                elements.append(temp)
                swap_down(a,i)
               
                temp = list(swap_left(a,i))
                elements.append(temp)
                swap_left(a,i)
            if i == 6:
                temp = list(swap_up(a,i))
                elements.append(temp)
                swap_up(a,i)
               
                temp = list(swap_right(a,i))
                elements.append(temp)
                swap_right(a,i)
               
            if i == 7:
                temp = list(swap_up(a,i))
                elements.append(temp)
                swap_up(a,i)
                
                temp = list(swap_right(a,i))
                elements.append(temp)
                swap_right(a,i)
                temp = list(swap_left(a,i))
                elements.append(temp)
                swap_left(a,i)
            if i == 8:
                temp = list(swap_up(a,i))
                elements.append(temp)
                swap_up(a,i)
 
                temp = list(swap_left(a,i))
                elements.append(temp)
                swap_left(a,i)
 
    
    return elements
 
 
 
    
 
a = [5,8,3,4,0,2,7,6,1]
res = [1,2,3,4,5,6,7,8,9,0]
depth,depth2 = 0,0
memory, memory2= 0,0
print("Введите 1 или 2 для просмотра:")
i = int(input())
if  i  == 1:
  a, depth,memory = A_star(a, res, depth, 1,memory)
  print("H1", depth,memory)
else:
  a, depth,memory = A_star(a, res, depth, 2,memory)
  print("H2", depth,memory)
 
#print("a: \n", a)

pip install anytree

